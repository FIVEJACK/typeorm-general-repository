[{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\helpers\\common-helper.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\helpers\\constants.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\helpers\\return-object.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·SUCCESS_STATUS_CODE,·INTERNAL_ERROR_STATUS_CODE,·DEFAULT_MAX_ITEM_PER_PAGE,·DEFAULT_PAGE,·BAD_REQUEST_STATUS_CODE·` with `␍⏎··SUCCESS_STATUS_CODE,␍⏎··INTERNAL_ERROR_STATUS_CODE,␍⏎··DEFAULT_MAX_ITEM_PER_PAGE,␍⏎··DEFAULT_PAGE,␍⏎··BAD_REQUEST_STATUS_CODE,␍⏎`","line":1,"column":9,"nodeType":null,"endLine":1,"endColumn":124,"fix":{"range":[8,123],"text":"\r\n  SUCCESS_STATUS_CODE,\r\n  INTERNAL_ERROR_STATUS_CODE,\r\n  DEFAULT_MAX_ITEM_PER_PAGE,\r\n  DEFAULT_PAGE,\r\n  BAD_REQUEST_STATUS_CODE,\r\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `data:·object·=·[],·success:·boolean·=·true,·httpStatusCode:·number·=·SUCCESS_STATUS_CODE,·message:·string·=·'Success'` with `␍⏎····data:·object·=·[],␍⏎····success:·boolean·=·true,␍⏎····httpStatusCode:·number·=·SUCCESS_STATUS_CODE,␍⏎····message:·string·=·'Success'␍⏎··`","line":14,"column":22,"nodeType":null,"endLine":14,"endColumn":139,"fix":{"range":[481,598],"text":"\r\n    data: object = [],\r\n    success: boolean = true,\r\n    httpStatusCode: number = SUCCESS_STATUS_CODE,\r\n    message: string = 'Success'\r\n  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `message:·string·=·'Failed',·status_code:·string,·httpStatusCode:·number·=·INTERNAL_ERROR_STATUS_CODE,·errors?:·any[]` with `␍⏎····message:·string·=·'Failed',␍⏎····status_code:·string,␍⏎····httpStatusCode:·number·=·INTERNAL_ERROR_STATUS_CODE,␍⏎····errors?:·any[]␍⏎··`","line":21,"column":22,"nodeType":null,"endLine":21,"endColumn":138,"fix":{"range":[788,904],"text":"\r\n    message: string = 'Failed',\r\n    status_code: string,\r\n    httpStatusCode: number = INTERNAL_ERROR_STATUS_CODE,\r\n    errors?: any[]\r\n  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `data:·object·=·{},·totalItem:·number·=·1,·itemPerPage:·number·=·DEFAULT_MAX_ITEM_PER_PAGE,·currentPage:·number·=·DEFAULT_PAGE` with `␍⏎····data:·object·=·{},␍⏎····totalItem:·number·=·1,␍⏎····itemPerPage:·number·=·DEFAULT_MAX_ITEM_PER_PAGE,␍⏎····currentPage:·number·=·DEFAULT_PAGE␍⏎··`","line":30,"column":18,"nodeType":null,"endLine":30,"endColumn":143,"fix":{"range":[1145,1270],"text":"\r\n    data: object = {},\r\n    totalItem: number = 1,\r\n    itemPerPage: number = DEFAULT_MAX_ITEM_PER_PAGE,\r\n    currentPage: number = DEFAULT_PAGE\r\n  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `message:·string·=·'Data·not·found',·httpStatusCode:·number·=·BAD_REQUEST_STATUS_CODE` with `␍⏎····message:·string·=·'Data·not·found',␍⏎····httpStatusCode:·number·=·BAD_REQUEST_STATUS_CODE␍⏎··`","line":37,"column":24,"nodeType":null,"endLine":37,"endColumn":108,"fix":{"range":[1470,1554],"text":"\r\n    message: string = 'Data not found',\r\n    httpStatusCode: number = BAD_REQUEST_STATUS_CODE\r\n  "}}],"errorCount":5,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { SUCCESS_STATUS_CODE, INTERNAL_ERROR_STATUS_CODE, DEFAULT_MAX_ITEM_PER_PAGE, DEFAULT_PAGE, BAD_REQUEST_STATUS_CODE } from './constants';\r\n\r\nexport default class ReturnObjectHelper {\r\n  public success: boolean;\r\n  public data: any;\r\n  public message: string;\r\n  public status_code: string;\r\n  public http_status_code: number;\r\n  public total_item?: number;\r\n  public item_per_page?: number;\r\n  public current_page?: number;\r\n  public errors?: any[];\r\n\r\n  public constructor(data: object = [], success: boolean = true, httpStatusCode: number = SUCCESS_STATUS_CODE, message: string = 'Success') {\r\n    this.success = success;\r\n    this.data = Array.isArray(data) ? data : [data];\r\n    this.message = message;\r\n    this.http_status_code = httpStatusCode;\r\n  }\r\n\r\n  public setToFailed(message: string = 'Failed', status_code: string, httpStatusCode: number = INTERNAL_ERROR_STATUS_CODE, errors?: any[]) {\r\n    this.success = false;\r\n    this.data = [];\r\n    this.message = message;\r\n    this.status_code = status_code;\r\n    this.http_status_code = httpStatusCode;\r\n    if (errors !== undefined) this.errors = errors;\r\n  }\r\n\r\n  public setData(data: object = {}, totalItem: number = 1, itemPerPage: number = DEFAULT_MAX_ITEM_PER_PAGE, currentPage: number = DEFAULT_PAGE) {\r\n    this.data = Array.isArray(data) ? data : [data];\r\n    this.total_item = totalItem;\r\n    this.item_per_page = itemPerPage;\r\n    this.current_page = currentPage;\r\n  }\r\n\r\n  public setToNotFound(message: string = 'Data not found', httpStatusCode: number = BAD_REQUEST_STATUS_CODE) {\r\n    this.success = false;\r\n    this.data = [];\r\n    this.message = message;\r\n    this.http_status_code = httpStatusCode;\r\n  }\r\n\r\n  public setMessage(message: string = '') {\r\n    this.message = message;\r\n  }\r\n\r\n  public setStatusCode(statusCode: string) {\r\n    this.status_code = statusCode;\r\n  }\r\n\r\n  public setHTTPStatusCode(httpStatusCode: number) {\r\n    this.http_status_code = httpStatusCode;\r\n  }\r\n}\r\n"},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\index.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\models\\common-model.ts","messages":[{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":38,"column":35,"nodeType":"BinaryExpression"},{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":45,"column":35,"nodeType":"BinaryExpression"},{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":51,"column":55,"nodeType":"BinaryExpression"},{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":58,"column":35,"nodeType":"BinaryExpression"},{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":65,"column":35,"nodeType":"BinaryExpression"},{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":72,"column":35,"nodeType":"BinaryExpression"},{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":79,"column":35,"nodeType":"BinaryExpression"},{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":99,"column":57,"nodeType":"BinaryExpression"},{"ruleId":"no-useless-concat","severity":1,"message":"Unexpected string concatenation of literals.","line":111,"column":35,"nodeType":"BinaryExpression"}],"errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ProxyQuery } from 'repositories/proxy-repository';\r\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\r\n\r\nexport class CommonModel {\r\n  @CreateDateColumn()\r\n  created_at: Date;\r\n\r\n  @UpdateDateColumn()\r\n  updated_at: Date;\r\n\r\n  protected primaryKey() {\r\n    return 'id';\r\n  }\r\n\r\n  public scopeId(query: ProxyQuery<CommonModel>, id: any) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + this.primaryKey() + ' = :id',\r\n      { id: id }\r\n    );\r\n  }\r\n\r\n  public scopeIds(query: ProxyQuery<CommonModel>, ids: Array<any>) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + this.primaryKey() + ' IN (:...ids)',\r\n      { ids: ids }\r\n    );\r\n  }\r\n\r\n  public scopeExcludeIds(query: ProxyQuery<CommonModel>, ids: Array<any>) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + this.primaryKey() + ' NOT IN (:...ids)',\r\n      { ids: ids }\r\n    );\r\n  }\r\n\r\n  public scopeIsActive(query: ProxyQuery<CommonModel>, is_active = true) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + 'is_active = :is_active',\r\n      { is_active: is_active }\r\n    );\r\n  }\r\n\r\n  public scopeIsFinished(query: ProxyQuery<CommonModel>, is_finished = false) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + 'is_finished = :is_finished',\r\n      { is_finished: is_finished }\r\n    );\r\n  }\r\n\r\n  public scopeStatus(query: ProxyQuery<CommonModel>, status: number) {\r\n    return query.andWhere(this.constructor.name + '.' + 'status = :status', {\r\n      status: status,\r\n    });\r\n  }\r\n\r\n  public scopeStartDate(query: ProxyQuery<CommonModel>, date: string) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + 'created_at >= :start_date',\r\n      { start_date: date + ' 00:00:00' }\r\n    );\r\n  }\r\n\r\n  public scopeEndDate(query: ProxyQuery<CommonModel>, date: string) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + 'created_at <= :end_date',\r\n      { end_date: date + ' 23:59:59' }\r\n    );\r\n  }\r\n\r\n  public scopeUpdateStartDate(query: ProxyQuery<CommonModel>, date: string) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + 'updated_at >= :update_start_date',\r\n      { update_start_date: date + ' 00:00:00' }\r\n    );\r\n  }\r\n\r\n  public scopeUpdateEndDate(query: ProxyQuery<CommonModel>, date: string) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + 'updated_at <= :update_end_date',\r\n      { update_end_date: date + ' 23:59:59' }\r\n    );\r\n  }\r\n\r\n  public scopeOrderByLatest(query: ProxyQuery<CommonModel>) {\r\n    return query.addOrderBy(\r\n      this.constructor.name + '.' + this.primaryKey(),\r\n      'DESC'\r\n    );\r\n  }\r\n\r\n  public scopeOrderByOldest(query: ProxyQuery<CommonModel>) {\r\n    return query.addOrderBy(\r\n      this.constructor.name + '.' + this.primaryKey(),\r\n      'ASC'\r\n    );\r\n  }\r\n\r\n  public scopeOrderByLatestUpdate(query: ProxyQuery<CommonModel>) {\r\n    return query.addOrderBy(this.constructor.name + '.' + 'updated_at', 'DESC');\r\n  }\r\n\r\n  public scopeOrderBySequence(query: ProxyQuery<CommonModel>) {\r\n    return query.addOrderBy(\r\n      this.constructor.name + '.' + this.primaryKey(),\r\n      'DESC'\r\n    );\r\n  }\r\n\r\n  public scopeLastModifiedBy(query: ProxyQuery<CommonModel>, id: any) {\r\n    return query.andWhere(\r\n      this.constructor.name + '.' + 'last_modified_by = :last_modified_by',\r\n      { last_modified_by: id }\r\n    );\r\n  }\r\n\r\n  public scopeLastModifiedById(query: ProxyQuery<CommonModel>, id: any) {\r\n    return query.andWhere(\r\n      this.constructor.name +\r\n        '.' +\r\n        'last_modified_by_id = :last_modified_by_id',\r\n      { last_modified_by_id: id }\r\n    );\r\n  }\r\n}\r\n"},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\repositories\\create-proxy.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\repositories\\general-repository.ts","messages":[{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":54,"column":56,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":54,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'commonQueryBuilder' is assigned a value but never used.","line":173,"column":9,"nodeType":"Identifier","endLine":173,"endColumn":27},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":195,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":195,"endColumn":14},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":199,"column":13,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":199,"endColumn":15},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":203,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":203,"endColumn":23},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":207,"column":19,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":207,"endColumn":21},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":207,"column":55,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":207,"endColumn":57},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":211,"column":20,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":211,"endColumn":22},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":211,"column":57,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":211,"endColumn":59},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":215,"column":18,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":215,"endColumn":20},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":215,"column":55,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":215,"endColumn":57},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":219,"column":27,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":219,"endColumn":29},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":219,"column":64,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":219,"endColumn":66},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":225,"column":25,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":225,"endColumn":27},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":225,"column":62,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":225,"endColumn":64},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":230,"column":24,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":230,"endColumn":26},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":231,"column":34,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":231,"endColumn":36},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":237,"column":27,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":237,"endColumn":29},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":238,"column":37,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":238,"endColumn":39},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":249,"column":17,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":249,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'commonQueryBuilder' is assigned a value but never used.","line":255,"column":9,"nodeType":"Identifier","endLine":255,"endColumn":27},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":259,"column":14,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":259,"endColumn":16},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":261,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":261,"endColumn":23},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":263,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":263,"endColumn":23}],"errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IRepository } from 'Repositories/i-repository';\r\nimport returnObject from 'Helpers/return-object';\r\nimport {\r\n  ObjectLiteral,\r\n  Repository,\r\n  SelectQueryBuilder,\r\n  EntityManager,\r\n} from 'typeorm';\r\nimport { DEFAULT_MAX_ITEM_PER_PAGE, DEFAULT_PAGE } from 'Helpers/constants';\r\nimport { getDefault } from 'Helpers/common-helper';\r\nimport { ProxyQuery as ProxyType } from './proxy-repository';\r\nimport { createProxy } from './create-proxy';\r\nimport { CommonModel } from 'Models/common-model';\r\n\r\ntype ProxyQuery<T> = ProxyType<T>;\r\n\r\nexport abstract class GeneralRepository<T> implements IRepository<T> {\r\n  public model: new () => T;\r\n  protected entity: EntityManager;\r\n  public queryBuilder: SelectQueryBuilder<T>;\r\n\r\n  protected item_per_page = 10;\r\n  protected primaryKey = 'id';\r\n\r\n  constructor(model: new () => T, entity: EntityManager) {\r\n    this.model = model;\r\n    this.entity = entity;\r\n  }\r\n\r\n  public repo(): Repository<T> {\r\n    return this.entity.getRepository(this.model);\r\n  }\r\n\r\n  public async insertBulkData(data: T[]) {\r\n    const toReturn = new returnObject();\r\n\r\n    await Promise.all(\r\n      data.map(async (insertData: any) => {\r\n        const modelRepo = this.repo();\r\n        await modelRepo.insert(insertData);\r\n\r\n        return insertData;\r\n      })\r\n    );\r\n\r\n    toReturn.setData(data as any);\r\n  }\r\n\r\n  async updateById(id: number, data: T) {\r\n    const dataUpdate: any = data;\r\n    const toReturn = new returnObject();\r\n    const queryBuilder = this.repo().createQueryBuilder();\r\n    for (let keys of Object.keys(data)) {\r\n      if (dataUpdate[keys] == null || dataUpdate[keys] == undefined) {\r\n        delete dataUpdate[keys];\r\n      }\r\n    }\r\n\r\n    const result = await queryBuilder\r\n      .update()\r\n      .set(data)\r\n      .where('id = :id', { id: id })\r\n      .execute();\r\n    toReturn.setData(result as any, 1, 1, 1);\r\n    return toReturn;\r\n  }\r\n\r\n  async deleteById(id: number) {\r\n    const toReturn = new returnObject();\r\n    const queryBuilder = this.repo().createQueryBuilder();\r\n    const result = await queryBuilder\r\n      .delete()\r\n      .where('id = :id', { id: id })\r\n      .execute();\r\n    toReturn.setData(result as any, 1, 1, 1);\r\n    return toReturn;\r\n  }\r\n\r\n  async findById(id: number) {\r\n    const toReturn = new returnObject();\r\n    const queryBuilder = this.repo().createQueryBuilder();\r\n    const result = await queryBuilder\r\n      .select()\r\n      .where('id = :id', { id: id })\r\n      .getOne();\r\n    toReturn.setData(result as any, 1, 1, 1);\r\n    return toReturn;\r\n  }\r\n\r\n  async insertData(data: T) {\r\n    const toReturn = new returnObject();\r\n\r\n    const modelRepo = this.repo();\r\n\r\n    try {\r\n      await modelRepo.insert(data);\r\n      toReturn.setData(data as any);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n\r\n    return toReturn;\r\n  }\r\n\r\n  async retrieveData(filter: ObjectLiteral, lockForUpdate: boolean = false) {\r\n    const toReturn = new returnObject();\r\n\r\n    let queryBuilder = this.repo().createQueryBuilder();\r\n\r\n    if (lockForUpdate) {\r\n      queryBuilder = queryBuilder.setLock('pessimistic_write');\r\n    }\r\n\r\n    const proxyQueryBuilder = createProxy(this.model, queryBuilder);\r\n\r\n    this.applyAllQuery(proxyQueryBuilder, filter);\r\n    const [result, total, itemPerPage, page] = await this.getPaginated(\r\n      proxyQueryBuilder,\r\n      filter\r\n    );\r\n\r\n    toReturn.setData(result, total, itemPerPage, page);\r\n    return toReturn;\r\n  }\r\n\r\n  protected async getPaginated(\r\n    queryBuilder: SelectQueryBuilder<T>,\r\n    filter: ObjectLiteral\r\n  ) {\r\n    const take =\r\n      filter['per_page'] === undefined\r\n        ? DEFAULT_MAX_ITEM_PER_PAGE\r\n        : filter['per_page'];\r\n    queryBuilder.limit(take);\r\n    const skip =\r\n      filter['page'] === undefined\r\n        ? (DEFAULT_PAGE - 1) * take\r\n        : (filter['page'] - 1) * take;\r\n    queryBuilder.offset(skip);\r\n\r\n    const itemPerPage =\r\n      filter['per_page'] === undefined\r\n        ? DEFAULT_MAX_ITEM_PER_PAGE\r\n        : filter['per_page'];\r\n    const page = filter['page'] === undefined ? DEFAULT_PAGE : filter['page'];\r\n\r\n    const [result, count] = await this.executeRetrieveDataQuery(queryBuilder);\r\n\r\n    return [result, count, itemPerPage, page];\r\n  }\r\n\r\n  /*\r\n  OVERRIDE THIS WHEN JOINING TABLE\r\n\r\n  const queryBuilderClone = queryBuilder.clone();\r\n  queryBuilderClone.select('count(*) as count');\r\n  queryBuilderClone.limit();\r\n  queryBuilderClone.offset();\r\n\r\n  const [result, totalRaw] = await Promise.all([queryBuilder.getRawMany(), queryBuilderClone.getRawOne()]);\r\n\r\n  return [result, totalRaw.count];\r\n  */\r\n  protected async executeRetrieveDataQuery(\r\n    queryBuilder: SelectQueryBuilder<T>\r\n  ) {\r\n    const [result, total] = await queryBuilder.getManyAndCount();\r\n\r\n    return [result, total];\r\n  }\r\n\r\n  protected commonFilter(queryBuilder: ProxyQuery<T>, filter: ObjectLiteral) {\r\n    let commonQueryBuilder = (queryBuilder as any) as ProxyQuery<CommonModel>;\r\n\r\n    const id = getDefault(filter['id']);\r\n    const ids = getDefault(filter['ids']);\r\n    const is_active = getDefault(filter['is_active']);\r\n    const exclude_ids = getDefault(filter['exclude_ids']);\r\n    const start_date = getDefault(filter['date_range_start']);\r\n    const end_date = getDefault(filter['date_range_end']);\r\n    const update_start_date = getDefault(filter['update_date_range_start']);\r\n    const update_end_date = getDefault(filter['update_date_range_end']);\r\n    const last_modified_by = getDefault(filter['last_modified_by']);\r\n    const last_modified_by_id = getDefault(filter['last_modified_by_id']);\r\n\r\n    const columnName = this.repo()\r\n      .manager.connection.getMetadata(this.model)\r\n      .ownColumns.map(column => column.propertyName);\r\n\r\n    const column: any = {};\r\n    for (let i = 0; i < columnName.length; i++) {\r\n      column.columnName[i] = 1;\r\n    }\r\n\r\n    if (id != undefined) {\r\n      commonQueryBuilder = commonQueryBuilder.Id(id);\r\n    }\r\n\r\n    if (ids != undefined) {\r\n      commonQueryBuilder = commonQueryBuilder.Ids(ids);\r\n    }\r\n\r\n    if (exclude_ids != undefined) {\r\n      commonQueryBuilder = commonQueryBuilder.ExcludeIds(exclude_ids);\r\n    }\r\n\r\n    if (is_active != undefined && column['is_active'] != undefined) {\r\n      commonQueryBuilder = commonQueryBuilder.IsActive(is_active);\r\n    }\r\n\r\n    if (start_date != undefined && column['created_at'] != undefined) {\r\n      commonQueryBuilder = commonQueryBuilder.StartDate(start_date);\r\n    }\r\n\r\n    if (end_date != undefined && column['created_at'] != undefined) {\r\n      commonQueryBuilder = commonQueryBuilder.EndDate(end_date);\r\n    }\r\n\r\n    if (update_start_date != undefined && column['updated_at'] != undefined) {\r\n      commonQueryBuilder = commonQueryBuilder.UpdateStartDate(\r\n        update_start_date\r\n      );\r\n    }\r\n\r\n    if (update_end_date != undefined && column['updated_at'] != undefined) {\r\n      commonQueryBuilder = commonQueryBuilder.UpdateEndDate(update_end_date);\r\n    }\r\n\r\n    if (\r\n      last_modified_by != undefined &&\r\n      column['last_modified_by'] != undefined\r\n    ) {\r\n      commonQueryBuilder = commonQueryBuilder.LastModifiedBy(last_modified_by);\r\n    }\r\n\r\n    if (\r\n      last_modified_by_id != undefined &&\r\n      column['last_modified_by_id'] != undefined\r\n    ) {\r\n      commonQueryBuilder = commonQueryBuilder.LastModifiedById(\r\n        last_modified_by_id\r\n      );\r\n    }\r\n  }\r\n\r\n  protected applySelect(queryBuilder: ProxyQuery<T>, filter: ObjectLiteral) {\r\n    const selects = getDefault(filter['selects']);\r\n\r\n    if (selects != undefined) {\r\n      queryBuilder = queryBuilder.select(selects);\r\n    }\r\n  }\r\n\r\n  protected commonSort(queryBuilder: ProxyQuery<T>, filter: ObjectLiteral) {\r\n    let commonQueryBuilder = (queryBuilder as any) as ProxyQuery<CommonModel>;\r\n\r\n    const sort = getDefault(filter['sort']);\r\n\r\n    if (sort == 'oldest') {\r\n      commonQueryBuilder = commonQueryBuilder.OrderByOldest();\r\n    } else if (sort == 'latest_update') {\r\n      commonQueryBuilder = commonQueryBuilder.OrderByLatestUpdate();\r\n    } else if (sort == 'sequence') {\r\n      commonQueryBuilder = commonQueryBuilder.OrderBySequence();\r\n    } else {\r\n      commonQueryBuilder = commonQueryBuilder.OrderByLatest();\r\n    }\r\n  }\r\n\r\n  protected applyFilter(queryBuilder: ProxyQuery<T>, filter: ObjectLiteral) {\r\n    this.commonFilter(queryBuilder, filter);\r\n  }\r\n\r\n  protected applySort(queryBuilder: ProxyQuery<T>, filter: ObjectLiteral) {\r\n    this.commonSort(queryBuilder, filter);\r\n  }\r\n\r\n  protected applyAllQuery(queryBuilder: ProxyQuery<T>, filter: ObjectLiteral) {\r\n    this.applySelect(queryBuilder, filter);\r\n    this.applyFilter(queryBuilder, filter);\r\n    this.applySort(queryBuilder, filter);\r\n  }\r\n}\r\n"},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\repositories\\i-repository.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\repositories\\proxy-query.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Parsing error: ']' expected.","line":8,"column":27,"nodeType":null}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SelectQueryBuilder } from 'typeorm';\r\n\r\ntype Unmapped = {\r\n  [name: string]: Function | any;\r\n};\r\n\r\ntype RemapType<T extends Unmapped> = {\r\n  [K in keyof T & string as RemoveScope<K>]: T[K] extends (query: any, ...filter: infer P) => ProxyQuery<T> ? (...filter: P) => ProxyQuery<T> : T[K];\r\n};\r\n\r\n// type ActionType<T> = (...args: Parameters<T>) => { type: string; payload: ReturnType<T> };\r\ntype RemoveScope<S extends string> = S extends `scope${infer Tail}` ? `${Tail}` : S;\r\n\r\nexport type ProxyQuery<T> = RemapType<T> & SelectQueryBuilder<T>;"},{"filePath":"D:\\Project\\Web\\typeorm-general-repository\\src\\repositories\\proxy-repository.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Parsing error: ']' expected.","line":8,"column":27,"nodeType":null}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SelectQueryBuilder } from 'typeorm';\r\n\r\ntype Unmapped = {\r\n  [name: string]: Function | any;\r\n};\r\n\r\ntype RemapType<T extends Unmapped> = {\r\n  [K in keyof T & string as RemoveScope<K>]: T[K] extends (query :any, ...filter: infer P) => ProxyQuery<T> ? (...filter: P) => ProxyQuery<T> : T[K];\r\n};\r\n\r\n// type ActionType<T> = (...args: Parameters<T>) => { type: string; payload: ReturnType<T> };\r\ntype RemoveScope<S extends string> = S extends `scope${infer Tail}` ? `${Tail}` : S;\r\n\r\nexport type ProxyQuery<T> = RemapType<T> & SelectQueryBuilder<T>;\r\n\r\nexport const createProxy = <T>(Model: new () => T, queryBuilder: SelectQueryBuilder<T>) => {\r\n  const modelObj: any = new Model();\r\n  const queryBuilderObj = queryBuilder;\r\n  const proxyObject = new Proxy(queryBuilderObj, {\r\n    get: (target, prop: string, receiver) => {\r\n      const funct = 'scope' + prop;\r\n      if (funct in modelObj) {\r\n        return (...val: any[]) => modelObj[funct](proxyObject, ...val);\r\n      }\r\n      return Reflect.get(target, prop, receiver);\r\n    },\r\n  });\r\n\r\n  return (proxyObject as any) as ProxyQuery<T>;\r\n};\r\n"}]